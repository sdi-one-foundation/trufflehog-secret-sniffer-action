name: 'Secret Sniffer - TruffleHog'
description: 'Github action runs TruffleHog to detect secrets in the repository. If secrets are found, it will fail the action and notify the team via email.'
inputs:
  ses-username:
    description: 'Username for the AWS SES service to send email alerts'
    required: true
  ses-password:
    description: 'Password for the AWS SES service to send email alerts'
    required: true
runs:
  using: "composite"
  steps:
    - shell: bash
      run: |
        if [ "${{ github.event_name }}" == "push" ]; then
          echo "branch=${{ github.ref_name }}" >> $GITHUB_ENV
          echo "SCAN_TYPE=full" >> $GITHUB_ENV
        fi
        if [ "${{ github.event_name }}" == "pull_request" ]; then
          echo "branch=${{ github.event.pull_request.head.ref }}" >> $GITHUB_ENV
          echo "SCAN_TYPE=changes" >> $GITHUB_ENV
          echo "BASE_SHA=${{ github.event.pull_request.base.sha }}" >> $GITHUB_ENV
          echo "HEAD_SHA=${{ github.event.pull_request.head.sha }}" >> $GITHUB_ENV
        fi

    - uses: actions/checkout@v3
      with:
        ref: ${{env.branch}}
        fetch-depth: 0  # Always use 0 for full scans to get complete history
        fetch-tags: true  # Also fetch tags to ensure all refs are available

    - name: Create Truuflehog Allow List File
      shell: bash
      run: cat ${{ github.action_path }}/.trufflehog-allowlist.txt >> .trufflehog-allowlist.txt

    # Replace the official TruffleHog action with direct Docker scan
    - name: Scan for secrets
      id: trufflehog
      shell: bash
      run: |
        # Run TruffleHog to scan for secrets
        echo "Running TruffleHog to scan for secrets..."
        if [ "${{ env.SCAN_TYPE }}" == "changes" ]; then
          # For PRs, scan the changed files
          echo "Getting changed files between ${{ env.BASE_SHA }} and ${{ env.HEAD_SHA }}..."

          # Use a more robust approach to get changed files
          if git diff --name-only ${{ env.BASE_SHA }} ${{ env.HEAD_SHA }} > pr_changed_files.txt 2>/dev/null; then
            echo "Successfully identified changed files"
            # Count changed files
            CHANGED_FILES_COUNT=$(wc -l < pr_changed_files.txt)
            echo "Number of changed files: $CHANGED_FILES_COUNT"
          else
            echo "Warning: Error getting changed files with git diff, using alternative method..."
            # Fallback: Get files changed in recent commits
            git diff --name-only HEAD~10 HEAD > pr_changed_files.txt || echo "No files found"
          fi

          # Filter to only include files that still exist and handle special characters
          echo "Filtering to only include existing files..."
          > pr_existing_files.txt
          while IFS= read -r file; do
            if [ -f "$file" ]; then
              echo "$file" >> pr_existing_files.txt
            else
              echo "Skipping non-existent file: $file"
            fi
          done < pr_changed_files.txt
          mv pr_existing_files.txt pr_changed_files.txt

          # Check if any files remain after filtering
          EXISTING_FILES_COUNT=$(wc -l < pr_changed_files.txt)
          echo "Number of existing changed files: $EXISTING_FILES_COUNT"

          if [ "$EXISTING_FILES_COUNT" -gt 0 ]; then
            echo "Found $EXISTING_FILES_COUNT changed files to scan"

            # Handle each file individually to prevent issues with special characters
            echo "Preparing safe file list for TruffleHog..."
            > safe_file_list.txt
            while IFS= read -r file; do
              # Escape special characters and quotes
              escaped_file=$(printf "%q" "$file")
              echo "$escaped_file" >> safe_file_list.txt
            done < pr_changed_files.txt

            # Scan files one by one to prevent failures affecting the entire scan
            echo "Scanning files individually..."
            > trufflehog_raw_unfiltered.txt
            FOUND_SECRETS=false

            while IFS= read -r file; do
              echo "Scanning file: $file"
              if docker run --rm -v "$(pwd):/pwd" -w /pwd trufflesecurity/trufflehog:latest filesystem \
                --results=verified,unknown,unverified \
                --json "/pwd/$file" >> trufflehog_raw_unfiltered.txt 2>/dev/null; then
                echo "  Scan completed successfully"
              else
                echo "  Warning: Scanning this file returned a non-zero exit code, continuing with next file"
              fi

              # Check if this file had any secrets
              if grep -q "DetectorName" trufflehog_raw_unfiltered.txt; then
                FOUND_SECRETS=true
              fi
            done < pr_changed_files.txt

            # Set the environment variable based on whether we found secrets
            echo "TRUFFLEHOG_FOUND_SECRETS=$FOUND_SECRETS" >> $GITHUB_ENV
          else
            echo "No existing changed files found to scan - this is normal for PRs that only delete files or revert changes"
            echo "Creating empty output file"
            touch trufflehog_raw_unfiltered.txt
            # Ensure the action doesn't fail
            echo "TRUFFLEHOG_FOUND_SECRETS=false" >> $GITHUB_ENV
          fi
        else
          # For full scans (pushes), scan the entire repo history
          echo "Running comprehensive git history scan..."

          # Ensure we have all refs
          git fetch --unshallow --tags --force origin || echo "Repository may already be unshallow"

          # Identify all branches to scan
          echo "Identifying all branches and refs..."
          ALL_BRANCHES=$(git branch -r | grep -v HEAD | sed 's/origin\///')

          # Run TruffleHog on the entire repository with all branches
          echo "Running thorough scan of all Git history..."
          docker run --rm -v "$(pwd):/pwd" -w /pwd trufflesecurity/trufflehog:latest git file:///pwd \
            --results=verified,unknown,unverified \
            --since-commit $(git rev-list --max-parents=0 HEAD) \
            --branch main \
            --branch develop \
            --branch $ALL_BRANCHES \
            --json --no-update > trufflehog_raw_unfiltered.txt || true
        fi

        # Post-process to apply allowlist filtering
        echo "Looking for allowlist file..."
        if [ -f ".trufflehog-allowlist.txt" ]; then
          echo "Found allowlist file at .trufflehog-allowlist.txt"
          ALLOWLIST_FILE=".trufflehog-allowlist.txt"
        elif [ -f ".github/.trufflehog-allowlist.txt" ]; then
          echo "Found allowlist file at .github/.trufflehog-allowlist.txt"
          ALLOWLIST_FILE=".github/.trufflehog-allowlist.txt"
        elif [ -f "$GITHUB_ACTION_PATH/.trufflehog-allowlist.txt" ]; then
          echo "Using built-in allowlist from action"
          ALLOWLIST_FILE="$GITHUB_ACTION_PATH/.trufflehog-allowlist.txt"
        else
          echo "No allowlist file found. To exclude false positives, create a .trufflehog-allowlist.txt file in your repository."
          echo "Using unfiltered results"
          cp trufflehog_raw_unfiltered.txt trufflehog_raw_output.txt
          # Continue with the rest of the script
          # ...
          return 0
        fi

        # Only proceed with filtering if we found an allowlist file
        echo "Filtering results using allowlist file: $ALLOWLIST_FILE"
        echo "Contents of allowlist file ($ALLOWLIST_FILE):"
        cat "$ALLOWLIST_FILE"

        # Create a new file for filtered output
        > trufflehog_raw_output.txt

        # Create an array of allowlist patterns (excluding comments and empty lines)
        ALLOWLIST_PATTERNS=()
        while IFS= read -r pattern || [ -n "$pattern" ]; do
          # Skip comments and empty lines
          if [[ ! "$pattern" =~ ^[[:space:]]*# && -n "$pattern" ]]; then
            # Trim whitespace
            pattern=$(echo "$pattern" | xargs)
            # Convert * wildcards to .* for regex
            pattern=$(echo "$pattern" | sed 's/\*/\.\*/g')
            ALLOWLIST_PATTERNS+=("$pattern")
            echo "Added pattern to allowlist (regex format): [$pattern]"
          fi
        done < "$ALLOWLIST_FILE"

        # Process each line of TruffleHog output
        while IFS= read -r line || [ -n "$line" ]; do
          if [[ "$line" == *"level"* || "$line" == *"finished scanning"* ]]; then
            # Always keep metadata lines
            echo "$line" >> trufflehog_raw_output.txt
          else
            # For findings, extract the raw/redacted value and check against allowlist
            EXCLUDE=false

            # Extract the secret values that might match our patterns
            RAW_VALUE=$(echo "$line" | jq -r '.Raw // ""')
            REDACTED_VALUE=$(echo "$line" | jq -r '.Redacted // ""')
            RAW_V2=$(echo "$line" | jq -r '.RawV2 // ""')

            echo "Checking finding: Raw=[$RAW_VALUE], Redacted=[$REDACTED_VALUE], RawV2=[$RAW_V2]"

            # Check against all patterns using regex matching
            for pattern in "${ALLOWLIST_PATTERNS[@]}"; do
              echo "  Testing pattern: [$pattern]"
              if [[ -n "$RAW_VALUE" && "$RAW_VALUE" =~ $pattern ]]; then
                EXCLUDE=true
                echo "  ✓ MATCH FOUND in Raw value! Pattern: [$pattern]"
                break
              elif [[ -n "$REDACTED_VALUE" && "$REDACTED_VALUE" =~ $pattern ]]; then
                EXCLUDE=true
                echo "  ✓ MATCH FOUND in Redacted value! Pattern: [$pattern]"
                break
              elif [[ -n "$RAW_V2" && "$RAW_V2" =~ $pattern ]]; then
                EXCLUDE=true
                echo "  ✓ MATCH FOUND in RawV2 value! Pattern: [$pattern]"
                break
              fi
            done

            # If not excluded, keep the finding
            if [ "$EXCLUDE" = false ]; then
              echo "$line" >> trufflehog_raw_output.txt
              echo "  ⚠️ NO MATCH FOUND - keeping finding"
            else
              echo "  ✓ Finding excluded due to allowlist match"
            fi
          fi
        done < trufflehog_raw_unfiltered.txt

        echo "Filtering complete. Before: $(grep -v "level\|finished scanning" trufflehog_raw_unfiltered.txt | wc -l) findings, After: $(grep -v "level\|finished scanning" trufflehog_raw_output.txt | wc -l) findings"
        # Only set the flag if we found secrets
        if [ -s trufflehog_raw_output.txt ]; then
          # Count actual findings (not metadata lines)
          FINDINGS_COUNT=$(cat trufflehog_raw_output.txt | grep -v "^{\"level\"" | grep -v "finished scanning" | wc -l)

          # Debug the raw output
          echo "Raw output sample (first 50 lines):"
          head -n 50 trufflehog_raw_output.txt

          if [ "$FINDINGS_COUNT" -gt 0 ]; then
            echo "Found $FINDINGS_COUNT potential secrets"
            echo "TRUFFLEHOG_FOUND_SECRETS=true" >> $GITHUB_ENV

            # Process output for notification
            echo "Processing detailed TruffleHog output (found $FINDINGS_COUNT findings)..."

            # Extract the actual findings (non-metadata lines)
            cat trufflehog_raw_output.txt | grep -v "^{\"level\"" | grep -v "finished scanning" > trufflehog_findings.txt

            # If we have findings, process them
            if [ -s trufflehog_findings.txt ]; then
              # Convert line-delimited JSON to array
              echo "[" > trufflehog_array.json
              cat trufflehog_findings.txt | tr '\n' ',' | sed 's/,$//' >> trufflehog_array.json
              echo "]" >> trufflehog_array.json

              # Process each finding to extract file and line information
              jq 'map(
                if .SourceMetadata.Data.Git.file != null then
                  {
                    "detection_time": "'$(date -u +"%Y-%m-%dT%H:%M:%SZ")'",
                    "repository": "${{ github.repository }}",
                    "source": "TruffleHog GitHub Action",
                    "file": .SourceMetadata.Data.Git.file,
                    "line": .SourceMetadata.Data.Git.line,
                    "detector_type": .DetectorName,
                    "commit_hash": .SourceMetadata.Data.Git.commit,
                    "commit_author": .SourceMetadata.Data.Git.email,
                    "commit_date": .SourceMetadata.Data.Git.timestamp,
                    "message": "A secret was detected in this repository. For security reasons, the actual secret is not displayed.",
                    "recommendation": "Review this file for any sensitive information such as API keys, passwords, or private tokens."
                  }
                elif .SourceMetadata.Data.Filesystem.file != null then
                  {
                    "detection_time": "'$(date -u +"%Y-%m-%dT%H:%M:%SZ")'",
                    "repository": "${{ github.repository }}",
                    "source": "TruffleHog GitHub Action",
                    "file": .SourceMetadata.Data.Filesystem.file,
                    "line": .SourceMetadata.Data.Filesystem.line,
                    "detector_type": .DetectorName,
                    "commit_hash": "N/A (filesystem scan)",
                    "commit_author": "N/A (filesystem scan)",
                    "message": "A secret was detected in this repository. For security reasons, the actual secret is not displayed.",
                    "recommendation": "Review this file for any sensitive information such as API keys, passwords, or private tokens."
                  }
                elif .SourceMetadata != null then
                  {
                    "detection_time": "'$(date -u +"%Y-%m-%dT%H:%M:%SZ")'",
                    "repository": "${{ github.repository }}",
                    "source": "TruffleHog GitHub Action",
                    "file": (.SourceMetadata | tostring | .[0:100] + "..."),
                    "line": "unknown",
                    "detector_type": .DetectorName,
                    "commit_hash": (.SourceMetadata.Data.Git.commit // "unknown"),
                    "commit_author": (.SourceMetadata.Data.Git.email // "unknown"),
                    "message": "A secret was detected in this repository. For security reasons, the actual secret is not displayed.",
                    "recommendation": "Review recent changes for any sensitive information such as API keys, passwords, or private tokens."
                  }
                else
                  {
                    "detection_time": "'$(date -u +"%Y-%m-%dT%H:%M:%SZ")'",
                    "repository": "${{ github.repository }}",
                    "source": "TruffleHog GitHub Action",
                    "file": "unknown",
                    "line": "unknown",
                    "detector_type": (.DetectorName // "Unknown"),
                    "commit_hash": "unknown",
                    "commit_author": "unknown",
                    "message": "A secret was detected in this repository. For security reasons, the actual secret is not displayed.",
                    "recommendation": "Review recent changes for any sensitive information such as API keys, passwords, or private tokens."
                  }
                end
              )' trufflehog_array.json > trufflehog_output.json || true
            else
              # If we detected secrets in the metadata but couldn't extract them, create a fallback message
              echo "[" > trufflehog_output.json
              for i in $(seq 1 $((SECRETS_COUNT + VERIFIED_COUNT))); do
                echo "{
                  \"detection_time\": \"$(date -u +"%Y-%m-%dT%H:%M:%SZ")\",
                  \"repository\": \"${{ github.repository }}\",
                  \"source\": \"TruffleHog GitHub Action\",
                  \"file\": \"unknown (historical secret)\",
                  \"line\": \"unknown\",
                  \"detector_type\": \"Unknown\",
                  \"message\": \"A historical secret was detected in this repository's git history. For security reasons, the actual secret is not displayed.\",
                  \"recommendation\": \"Review the repository history for any sensitive information such as API keys, passwords, or private tokens.\"
                }$([ "$i" -lt "$((SECRETS_COUNT + VERIFIED_COUNT))" ] && echo ",")" >> trufflehog_output.json
              done
              echo "]" >> trufflehog_output.json
            fi
          else
            echo "No secrets found by TruffleHog"
          fi
        else
          echo "No TruffleHog output found"
        fi

        # Add secret statistics to the environment
        if [ -s trufflehog_output.json ]; then
          echo "SECRET_STATS<<EOF" >> $GITHUB_ENV
          echo "<ul>" >> $GITHUB_ENV
          jq -r 'group_by(.detector_type) | map({type: .[0].detector_type, count: length}) | .[] | "<li><strong>" + .type + ":</strong> " + (.count|tostring) + "</li>"' trufflehog_output.json >> $GITHUB_ENV
          echo "</ul>" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV
        fi

        # Add file statistics to the environment
        if [ -s trufflehog_output.json ]; then
          echo "FILE_STATS<<EOF" >> $GITHUB_ENV
          echo "<ul>" >> $GITHUB_ENV
          jq -r 'group_by(.file) | map({file: .[0].file, count: length}) | .[] | "<li><code>" + .file + "</code>: " + (.count|tostring) + " finding(s)</li>"' trufflehog_output.json >> $GITHUB_ENV
          echo "</ul>" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV
        fi

    - name: Export findings for notification
      if: env.TRUFFLEHOG_FOUND_SECRETS == 'true'
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          let findings = [];

          try {
            const outputContent = fs.readFileSync('trufflehog_output.json', 'utf8');
            findings = JSON.parse(outputContent);
            console.log("Successfully parsed findings for notification");
          } catch (error) {
            console.error("Error processing TruffleHog output:", error);
            findings = [{
              message: "Error processing TruffleHog output, but secrets were detected."
            }];
          }

          // Add findings to environment variable for email notification
          const findingsJSON = JSON.stringify(findings, null, 2);
          core.exportVariable('TRUFFLEHOG_FINDINGS', findingsJSON);

    - name: Set event type and capture commit details
      if: env.TRUFFLEHOG_FOUND_SECRETS == 'true'
      shell: bash
      run: |
        if [ "${{ github.event_name }}" == "pull_request" ]; then
          echo "EVENT_TYPE=Pull Request" >> $GITHUB_ENV
          echo "EVENT_URL=${{ github.event.pull_request.html_url }}" >> $GITHUB_ENV

          # Get PR commit details
          echo "COMMIT_DETAILS<<EOF" >> $GITHUB_ENV
          echo "<table>" >> $GITHUB_ENV
          echo "  <tr><td><strong>PR Title:</strong></td><td>${{ github.event.pull_request.title }}</td></tr>" >> $GITHUB_ENV
          echo "  <tr><td><strong>PR Number:</strong></td><td>#${{ github.event.pull_request.number }}</td></tr>" >> $GITHUB_ENV
          echo "  <tr><td><strong>Base Commit:</strong></td><td><code>${{ github.event.pull_request.base.sha }}</code></td></tr>" >> $GITHUB_ENV
          echo "  <tr><td><strong>Head Commit:</strong></td><td><code>${{ github.event.pull_request.head.sha }}</code></td></tr>" >> $GITHUB_ENV
          echo "  <tr><td><strong>Commits in PR:</strong></td><td>${{ github.event.pull_request.commits }}</td></tr>" >> $GITHUB_ENV
          echo "  <tr><td><strong>Author:</strong></td><td>${{ github.event.pull_request.user.login }}</td></td></tr>" >> $GITHUB_ENV
          echo "  <tr><td><strong>Last Updated:</strong></td><td>${{ github.event.pull_request.updated_at }}</td></tr>" >> $GITHUB_ENV
          echo "</table>" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

          # Create a list item for PR (only shown for pull requests)
          PR_LIST_ITEM='<li><a href="${{ github.event.pull_request.html_url }}">Pull Request #${{ github.event.pull_request.number }}</a></li>'

          echo "PR_LIST_ITEM<<EOF" >> $GITHUB_ENV
          echo "$PR_LIST_ITEM" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV
        else
          echo "EVENT_TYPE=Push to ${{ github.ref_name }} branch" >> $GITHUB_ENV
          echo "EVENT_URL=${{ github.server_url }}/${{ github.repository }}/tree/${{ github.ref_name }}" >> $GITHUB_ENV

          # Get push commit details
          echo "COMMIT_DETAILS<<EOF" >> $GITHUB_ENV
          echo "<table>" >> $GITHUB_ENV
          echo "  <tr><td><strong>Branch:</strong></td><td>${{ github.ref_name }}</td></tr>" >> $GITHUB_ENV
          echo "  <tr><td><strong>Commit SHA:</strong></td><td><code>${{ github.sha }}</code></td></tr>" >> $GITHUB_ENV

          # Get the commit message and author
          COMMIT_MESSAGE=$(git log -1 --pretty=format:"%s")
          COMMIT_AUTHOR=$(git log -1 --pretty=format:"%an")
          COMMIT_EMAIL=$(git log -1 --pretty=format:"%ae")
          COMMIT_DATE=$(git log -1 --pretty=format:"%ad" --date=format:"%Y-%m-%d %H:%M:%S")

          echo "  <tr><td><strong>Commit Message:</strong></td><td>${COMMIT_MESSAGE}</td></tr>" >> $GITHUB_ENV
          echo "  <tr><td><strong>Author:</strong></td><td>${COMMIT_AUTHOR} (${COMMIT_EMAIL})</td></tr>" >> $GITHUB_ENV
          echo "  <tr><td><strong>Commit Date:</strong></td><td>${COMMIT_DATE}</td></tr>" >> $GITHUB_ENV
          echo "</table>" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

          echo "PR_LIST_ITEM=" >> $GITHUB_ENV
        fi

    - name: Post findings to PR
      if: env.TRUFFLEHOG_FOUND_SECRETS == 'true' && github.event_name == 'pull_request'
      uses: actions/github-script@v6
      with:
        github-token: ${{ github.token }}
        script: |
          const fs = require('fs');
          let findings = [];

          try {
            const outputContent = fs.readFileSync('trufflehog_output.json', 'utf8');
            findings = JSON.parse(outputContent);
          } catch (error) {
            console.error("Error processing TruffleHog output:", error);
            findings = [{
              message: "Error processing TruffleHog output, but secrets were detected."
            }];
          }

          // Remove this line as it's now in the separate step
          // core.exportVariable('TRUFFLEHOG_FINDINGS', JSON.stringify(findings, null, 2));

          // Build a table of findings if we have detailed information
          let secretsTable = '';
          if (findings.length > 0 && findings[0].file) {
            secretsTable = `
          | File | Line | Type |
          |------|------|------|
          ${findings.map(f => `| \`${f.file}\` | ${f.line || 'N/A'} | ${f.detector_type || 'Unknown'} |`).join('\n')}
          `;
          }

          const commentBody = `## ⚠️ Security Alert: Secrets Detected by TruffleHog ⚠️
          This pull request has been scanned for secrets using TruffleHog, and sensitive information has been detected. Please review the findings below and take appropriate action to secure your repository.

          TruffleHog has detected secrets in this pull request. Please review and remove any sensitive information.
          ${secretsTable}

          <details>
          <summary>Details (click to expand)</summary>

          \`\`\`json
          ${JSON.stringify(findings, null, 2)}
          \`\`\`
          </details>

          **Important:** Committing secrets to a repository poses significant security risks. Please remove these secrets and consider them compromised.`;

          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: commentBody
          });

    # Add this step right after processing the findings but before the PR comment
    - name: Create GitHub Annotations for findings
      if: env.TRUFFLEHOG_FOUND_SECRETS == 'true'
      shell: bash
      run: |
        # Read the findings and create annotations
        if [ -s trufflehog_output.json ]; then
          echo "Creating GitHub annotations for findings..."

          # Process each finding to create an annotation
          jq -c '.[]' trufflehog_output.json | while read -r finding; do
            file=$(echo "$finding" | jq -r '.file // "unknown"')
            line=$(echo "$finding" | jq -r '.line // "1"')
            detector=$(echo "$finding" | jq -r '.detector_type // "Unknown"')
            commit=$(echo "$finding" | jq -r '.commit_hash // "unknown"')
            author=$(echo "$finding" | jq -r '.commit_author // "unknown"')
            # Extract commit date and format it
            commit_date=$(echo "$finding" | jq -r '.commit_date // "unknown"')
            # Format the date nicely if it exists
            if [ "$commit_date" != "unknown" ] && [ "$commit_date" != "null" ]; then
              commit_date=$(date -d "$commit_date" +"%Y-%m-%d" 2>/dev/null || echo "$commit_date")
            fi

            # Skip files that are "unknown" as they won't display properly
            if [ "$file" != "unknown" ] && [ "$file" != "N/A (filesystem scan)" ] && [ "${file:0:1}" != "(" ]; then
              # Create a warning annotation with date
              echo "::warning file=${file},line=${line}::Secret detected: ${detector} - Author: ${author} - Date: ${commit_date} - Commit: ${commit:0:7}"
            else
              # For unknown locations, just output a general warning with date
              echo "::warning::Secret detected: ${detector} in unknown location - Author: ${author} - Date: ${commit_date} - Commit: ${commit:0:7}"
            fi
          done
        fi

    - name: Send mail
      if: env.TRUFFLEHOG_FOUND_SECRETS == 'true'
      uses: dawidd6/action-send-mail@v5
      with:
        server_address: email-smtp.us-east-1.amazonaws.com
        server_port: 465
        secure: true
        username: ${{inputs.ses-username}}
        password: ${{inputs.ses-password}}
        subject: Secrets Found in ${{github.repository}} repository
        to: alerts+foundation@one.singledigits.com
        from: '"Foundation Alerts" <alerts+foundation@one.singledigits.com>'
        html_body: |
          <!DOCTYPE html>
          <html>
          <head>
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <style>
              body {
                font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
                line-height: 1.6;
                color: #333;
                max-width: 800px;
                margin: 0 auto;
                padding: 20px;
              }
              .header {
                background-color: #D32F2F;
                color: white;
                padding: 20px;
                border-radius: 5px 5px 0 0;
                margin-bottom: 0;
              }
              h1, h2, h3 {
                margin-top: 0;
              }
              .content {
                background-color: #f9f9f9;
                border: 1px solid #ddd;
                border-top: none;
                padding: 20px;
                border-radius: 0 0 5px 5px;
              }
              .alert {
                background-color: #FFF3E0;
                border-left: 4px solid #FF9800;
                padding: 15px;
                margin-bottom: 20px;
              }
              .button {
                display: inline-block;
                background-color: #f1f1f1;
                color: #0366d6;
                padding: 8px 16px;
                text-decoration: none;
                border-radius: 20px;
                margin-right: 8px;
                margin-bottom: 8px;
                border: 1px solid #e1e4e8;
                font-size: 14px;
                transition: background-color 0.2s;
              }
              .button:hover {
                background-color: #e6f1ff;
                border-color: #c8e1ff;
              }
              .button.warning {
                background-color: #fff1f0;
                color: #d73a49;
                border-color: #f9d0c4;
              }
              .button.warning:hover {
                background-color: #ffdce0;
                border-color: #f9c2c2;
              }
              .link-list {
                margin-bottom: 20px;
                padding-left: 20px;
              }
              .link-list li {
                margin-bottom: 8px;
              }
              .link-list a {
                color: #0366d6;
                text-decoration: underline;
                font-weight: 500;
              }
              .link-list a:hover {
                text-decoration: none;
              }
              pre {
                background-color: #f1f1f1;
                padding: 15px;
                border-radius: 4px;
                overflow-x: auto;
                border: 1px solid #ddd;
                font-family: monospace;
                font-size: 13px;
              }
              .emoji {
                font-size: 20px;
                vertical-align: middle;
                margin-right: 8px;
              }
            </style>
          </head>
          <body>
            <div class="header">
              <h1>⚠️ Security Alert: Secrets Detected</h1>
            </div>
            <div class="content">
              <div class="alert">
                <p><strong>Secrets have been detected in the ${{github.repository}} repository.</strong></p>
                <p><strong>Event Type:</strong> ${{ env.EVENT_TYPE }}</p>
                <p>Please investigate and remediate immediately. Exposed secrets pose a significant security risk.</p>
              </div>

              <h3>🔗 Important Links</h3>
              <ol class="link-list">
                <li>
                  <a href="${{ github.server_url }}/${{ github.repository }}">
                    Repository
                  </a>
                </li>
                <li>
                  <a href="${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}">
                    GitHub Action Run
                  </a>
                </li>
                ${{ env.PR_LIST_ITEM }}
              </ol>

              <h3>📊 Secret Statistics</h3>
              <div class="stats-container">
                <div>
                  <h4>By Type</h4>
                  ${{ env.SECRET_STATS }}
                </div>
                <div>
                  <h4>By File</h4>
                  ${{ env.FILE_STATS }}
                </div>
              </div>

              <h3>🔍 Detection Details</h3>
              <pre>${{ env.TRUFFLEHOG_FINDINGS }}</pre>

              <hr>
              <p><em>This is an automated security alert from the SingleDigits Foundation Team.</em></p>
              <p><small>Please do not reply to this email. For assistance, contact the security team.</small></p>
            </div>
          </body>
          </html>
        ignore_cert: true
        convert_markdown: true
        priority: high
        nodemailerlog: true
        nodemailerdebug: true

    - name: Scan Results Status - Exit with error if secrets found
      if: env.TRUFFLEHOG_FOUND_SECRETS == 'true'
      run: exit 1
      shell: bash

    # Check for and fix potential Git reference issues
    - name: Fix Git references
      shell: bash
      run: |
        echo "Ensuring Git repository is in a healthy state..."

        # Make sure we have a full clone, not shallow
        echo "Fetching complete Git history..."
        git fetch --unshallow --prune || echo "Repository may already be unshallow"

        # Clean any potential corrupted objects
        echo "Running Git garbage collection and checking repository..."
        git gc --auto
        git fsck --full || echo "Some Git objects may be missing (this is expected in some cases)"

        # Get the proper BASE_SHA and HEAD_SHA for PR scans
        if [ "${{ github.event_name }}" == "pull_request" ]; then
          echo "Setting up proper commit references for pull request..."
          # Use merge-base to find the common ancestor - more reliable than direct base reference
          BASE_SHA=$(git merge-base ${{ github.event.pull_request.base.sha }} ${{ github.event.pull_request.head.sha }})
          HEAD_SHA=${{ github.event.pull_request.head.sha }}

          # Verify both SHAs exist
          if ! git cat-file -e $BASE_SHA 2>/dev/null; then
            echo "Warning: BASE_SHA $BASE_SHA is not valid, using fallback..."
            BASE_SHA=$(git rev-list --max-parents=0 HEAD)
          fi

          if ! git cat-file -e $HEAD_SHA 2>/dev/null; then
            echo "Warning: HEAD_SHA $HEAD_SHA is not valid, using current HEAD..."
            HEAD_SHA=$(git rev-parse HEAD)
          fi

          echo "BASE_SHA=$BASE_SHA" >> $GITHUB_ENV
          echo "HEAD_SHA=$HEAD_SHA" >> $GITHUB_ENV
        fi

        # After the main scan, also scan PR references
        echo "Fetching and scanning Pull Request references..."
        git config --add remote.origin.fetch '+refs/pull/*/head:refs/remotes/origin/pr/*'
        git fetch --force origin

        # Get list of PR refs
        PR_REFS=$(git for-each-ref --format='%(refname)' refs/remotes/origin/pr/)

        if [ -n "$PR_REFS" ]; then
          echo "Found PR references to scan"
          for pr_ref in $PR_REFS; do
            PR_NUM=$(echo $pr_ref | sed 's/.*\/pr\///')
            echo "Scanning PR #$PR_NUM reference..."

            # Create a temporary branch for scanning
            git checkout -b temp-pr-scan-$PR_NUM $pr_ref

            # Scan this PR
            docker run --rm -v "$(pwd):/pwd" -w /pwd trufflesecurity/trufflehog:latest git file:///pwd \
              --results=verified,unknown,unverified \
              --max-depth 500 \
              --json --no-update >> trufflehog_raw_unfiltered.txt || true

            # Return to original branch
            git checkout ${{env.branch}}
            git branch -D temp-pr-scan-$PR_NUM
          done
        else
          echo "No PR references found to scan"
        fi

        # Add an additional scan for a broader commit range
        echo "Performing a supplementary deep scan..."

        # Get the earliest commit
        FIRST_COMMIT=$(git rev-list --max-parents=0 HEAD)
        CURRENT_HEAD=$(git rev-parse HEAD)

        echo "Scanning from earliest commit ($FIRST_COMMIT) to current HEAD ($CURRENT_HEAD)..."
        docker run --rm -v "$(pwd):/pwd" -w /pwd trufflesecurity/trufflehog:latest git file:///pwd \
          --results=verified,unknown,unverified \
          --since-commit $FIRST_COMMIT \
          --max-depth 1000 \
          --json --no-update >> trufflehog_raw_unfiltered.txt || true
